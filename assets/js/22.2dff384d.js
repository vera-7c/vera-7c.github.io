(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{479:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"自我介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍"}},[t._v("#")]),t._v(" 自我介绍")]),t._v(" "),a("h2",{attrs:{id:"vue中的diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue中的diff算法"}},[t._v("#")]),t._v(" vue中的diff算法")]),t._v(" "),a("h2",{attrs:{id:"vue的虚拟节点了解过吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue的虚拟节点了解过吗？"}},[t._v("#")]),t._v(" vue的虚拟节点了解过吗？")]),t._v(" "),a("h2",{attrs:{id:"介绍一下块级上下文的概念（bfc）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下块级上下文的概念（bfc）"}},[t._v("#")]),t._v(" 介绍一下块级上下文的概念（BFC）")]),t._v(" "),a("h2",{attrs:{id:"储存cookie（http），localstorage，sessionstorage（本地储存）的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#储存cookie（http），localstorage，sessionstorage（本地储存）的区别"}},[t._v("#")]),t._v(" 储存cookie（http），localStorage，sessionStorage（本地储存）的区别")]),t._v(" "),a("p",[t._v("1、生命周期\nlocalstorage-永久，除非用户在浏览器上清除\nsessionstorage-临时，当前会话有效\ncookie-一般浏览器关闭失效，可以设置失效时间")]),t._v(" "),a("p",[t._v("2、存储大小\nlocalstorage和sessionstorage-5mb\ncookie-4kb")]),t._v(" "),a("p",[t._v("3、通信：\nlocalstorage和sessionstorage-仅在客户端，节省流量\ncookie-http头中")]),t._v(" "),a("p",[t._v("webstorage中两者的更加细微的区别：\n1、存储类型：\nlocalstorage和sessionstorage-都只能字符串，复杂的用JSON对象的stringify和parse处理\n2、应用场景：\nlocalstorage-长期登录\nsessionstorage-一次性登录")]),t._v(" "),a("h2",{attrs:{id:"html的空元素有哪些？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html的空元素有哪些？"}},[t._v("#")]),t._v(" html的空元素有哪些？")]),t._v(" "),a("p",[t._v("空元素：没有内容的HTML元素")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('比如:<link>,<meta>,<br>,<hr>,<input type ="hidden">\n\n行内元素：a,b,span,img,input,select,textarea,em,strong等\n块级元素：ul,li,ol,dl,dt,dd,h*,p,srction,div,form等\n')])])]),a("h2",{attrs:{id:"编写共用组件的时候你从哪些方面考虑？（我答的是样式修改-）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写共用组件的时候你从哪些方面考虑？（我答的是样式修改-）"}},[t._v("#")]),t._v(" 编写共用组件的时候你从哪些方面考虑？（我答的是样式修改...）")]),t._v(" "),a("p",[t._v("或许要理解为工程化的考虑因素？\n1、模块化\nJS模块化：JS的最新规范ECMAScript 6 (ES6)中，引入了模块功能。\nCSS模块化方案：使用JS 来管理样式模块，每个 class 名后带一个独一无二 hash 值来避免全局命名冲突问题。\n2、组件化\n让页面不过是组件的容器。\n3、静态资源优化和管理")]),t._v(" "),a("blockquote",[a("p",[t._v("静态资源管理系统 = 资源表 + 资源加载框架\n资源表是一份数据文件（比如JSON），是项目中所有静态资源（主要是JS和CSS）的构建信息记录，通过构建工具扫描项目源码生成，是一种k-v结构的数据，以每个资源的id为key，记录了资源的类别、部署路径、依赖关系、打包合并等内容\n4、规范化\n目录结构、编码规范、接口规范、文档规范、组件管理、git分支管理、commit描述规范、定期codereview、试卷图标规范等等\n5、自动化\n简单机械的步骤让机器完成，比如图标合并、持续集成、自动化构建、自动化部署、自动化测试等等。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);