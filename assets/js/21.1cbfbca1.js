(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{478:function(n,t,a){"use strict";a.r(t);var e=a(2),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("学习jQuery的笔记，包括基础和原理。原理大有学问。\n")]),n._v(" "),a("h1",{attrs:{id:"初识jquery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识jquery"}},[n._v("#")]),n._v(" 初识jQuery")]),n._v(" "),a("h2",{attrs:{id:"什么是jquery？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是jquery？"}},[n._v("#")]),n._v(" 什么是jquery？")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("快速简洁的js库。write less, do more。\n")])])]),a("h2",{attrs:{id:"操作优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作优势"}},[n._v("#")]),n._v(" 操作优势")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("方便HTML文档遍历，事件处理，动画，ajax交互。轻量级大小大约19KB，跨浏览器支持，支持CSS3选择器和XPath语法。\n")])])]),a("h2",{attrs:{id:"版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[n._v("#")]),n._v(" 版本")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("1.x 支持浏览器版本多。文件大。大厂基本都用。\n类型：压缩版本，未压缩版本。开发使用未压缩（阅读学习），上线使用压缩。\n")])])]),a("h2",{attrs:{id:"为什么能用-符号访问jquery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么能用-符号访问jquery"}},[n._v("#")]),n._v(" 为什么能用$符号访问jquery")]),n._v(" "),a("h1",{attrs:{id:"原生js和jq比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生js和jq比较"}},[n._v("#")]),n._v(" 原生JS和jQ比较")]),n._v(" "),a("h2",{attrs:{id:"入口函数的区别（加载模式的区别）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入口函数的区别（加载模式的区别）"}},[n._v("#")]),n._v(" 入口函数的区别（加载模式的区别）")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("window.onload = function(ev){}\n$(document).ready(function(){})\n1、jq不能拿到DOM元素的宽高，原生js等到DOM元素加载完毕，并且图片加载完毕才会执行\njq等到DOM元素加载完毕，但是不会等到图片也加载完毕就会执行\n2、原生JS编写多个入口，后写覆盖原先；jq按顺序执行，后面不会覆盖前面放入口函数\n")])])]),a("h1",{attrs:{id:"写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写法"}},[n._v("#")]),n._v(" 写法")]),n._v(" "),a("h2",{attrs:{id:"入口函数写法，在入口函数中写jq代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入口函数写法，在入口函数中写jq代码"}},[n._v("#")]),n._v(" 入口函数写法，在入口函数中写jq代码")]),n._v(" "),a("p",[n._v("jQuery(document).ready(function(){})\n$(document).ready(function(){})\n$(function(){...各种操作})——推荐写法\njQuery(function(){})")]),n._v(" "),a("h1",{attrs:{id:"jq冲突问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq冲突问题"}},[n._v("#")]),n._v(" jq冲突问题")]),n._v(" "),a("p",[n._v("框架冲突$符号(后引入的框架会覆盖前面的框架冲突部分)\n解决方案：释放$使用权\njQuery.noConflict()//必须在其他jquery代码之前写出来，另外不再使用$而是用jQuery其他写法\n解决方案2：\n修改符号var jq = jQuery.noConflict()\njq(function(){})")]),n._v(" "),a("h1",{attrs:{id:"核心函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心函数"}},[n._v("#")]),n._v(" $()核心函数")]),n._v(" "),a("h2",{attrs:{id:"接收参数：都返回返回jquery对象（伪数组）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收参数：都返回返回jquery对象（伪数组）"}},[n._v("#")]),n._v(" 接收参数：都返回返回jquery对象（伪数组）")]),n._v(" "),a("ol",[a("li",[n._v("接收一个函数\n$(function(){})")]),n._v(" "),a("li",[n._v("接收一个字符串")]),n._v(" "),a("li",[n._v('接受一个字符串选择器，返回jquery对象，其中保存dom元素\nvar $box1 = $(".box1")\nvar $div = $("div")')]),n._v(" "),a("li",[n._v("接收一个字符串代码片段")]),n._v(" "),a("li",[n._v("接收一个DOM元素（会被包装成jquery对象")])]),n._v(" "),a("p",[n._v("伪数组：有属性0-n-1，有length属性\n伪数组和数组的区别？")]),n._v(" "),a("h2",{attrs:{id:"实例方法和静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法和静态方法"}},[n._v("#")]),n._v(" 实例方法和静态方法")]),n._v(" "),a("p",[n._v("创建一个类。function AClass(){}\n添加静态方法。AClass.staticMethod = function(){}\n添加实例方法，通过原型添加。AClass.prototype.instanceMethod = function(){}\n静态方法通过类名调用。AClass.staticMethod()\n实例方法通过创建实例后调用。var a = new AClass()\na.instanceMethod()")]),n._v(" "),a("h3",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[n._v("#")]),n._v(" 静态方法")]),n._v(" "),a("h4",{attrs:{id:"each"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#each"}},[n._v("#")]),n._v(" each")]),n._v(" "),a("p",[n._v("原生遍历数组foreach不能遍历伪数组，获取元素和索引。\n原生js：\narr.foreach(function(value,index){console.log(index,value)})")]),n._v(" "),a("p",[n._v("jq:\n$.each(arr,function(index,value){\nconsole.log(index,value)\n//return value+index\n//返回的数组没有任何改变，和原数组一样\n})\n区别：参数顺序不同，能否遍历伪数组。")]),n._v(" "),a("p",[n._v("jquery的each方法有几个？分别应用于什么场景？")]),n._v(" "),a("h4",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[n._v("#")]),n._v(" map")]),n._v(" "),a("p",[n._v("var arr =[1,2,3,4,5]\nvar obj = {0:1,1:3,2:5,3:7,4:9,length:5}//伪数组\n原生js：\n//参数：遍历到的元素，遍历到的索引，被遍历的数组\narr.map(function(value,index,array){\nconsole.log(index,value,array)\n})\njq:\n//参数：遍历到的元素，遍历到的索引\n$.map(arr,function(value,index){\nconsole.log(index,value)\n//return value+index\n//组成新的数组放回，索引和值一起返回\n})\n区别：和each一样，能否遍历伪数组。jquery中\nmap和each的区别，参数顺序，each默认返回对象是原数组，map默认返回对象为空数组。map静态方法可以在return中对被遍历的数组进行处理。")]),n._v(" "),a("h4",{attrs:{id:"其他静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他静态方法"}},[n._v("#")]),n._v(" 其他静态方法")]),n._v(" "),a("p",[n._v("去掉空格：\nvar res= $.trim(str)//作用，参数，返回值\n判断window：\n$.isWindow(obj)//作用，参数，返回值(Boolean)\n判断数组：\n$.isAray(obj)//可以判断真伪数组\n判断函数：\n$.isFunction(obj)//jQuery本质是一个匿名函数，返回true\n暂停入口函数执行，等别的加载完了再执行入口函数\n$.holdReady(boolean)")]),n._v(" "),a("h2",{attrs:{id:"属性与属性节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性与属性节点"}},[n._v("#")]),n._v(" 属性与属性节点")]),n._v(" "),a("p",[n._v('属性：对象身上保存的变量\n如何操作属性：赋值和获取p.name;p["name] = "zs";\n属性节点：标签当中的属性，保存在DOM元素的attribute当中\n如何操作属性节点：\n原生js：DOM元素.setAttribute("属性名称","值")，getAttribute\n区别：任何对象都有属性，只有dom对象才有属性节点')]),n._v(" "),a("h2",{attrs:{id:"jq操作属性节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq操作属性节点"}},[n._v("#")]),n._v(" jq操作属性节点")]),n._v(" "),a("h3",{attrs:{id:"attr获取-设置属性节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attr获取-设置属性节点"}},[n._v("#")]),n._v(" attr获取/设置属性节点")]),n._v(" "),a("p",[n._v('$("span").attr("class")//只会获取第一个，一个参数表示获取\n$("span").attr("class","box aaa")//所有的都设置，如果设置不存在的属性的属性节点，系统会自动新增abc，两个参数表示设置')]),n._v(" "),a("p",[n._v('属性节点删除：\n$("span").removeAttr("class name")//找到的所有的都删除，多个属性节点用空格隔开')]),n._v(" "),a("h3",{attrs:{id:"prop获取-设置属性节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prop获取-设置属性节点"}},[n._v("#")]),n._v(" prop获取/设置属性节点")]),n._v(" "),a("p",[n._v('$("span").prop("class")////只会获取第一个，一个参数表示获取\n$("span").prop("class","box aaa")\n$("span").removeProp("demo");')]),n._v(" "),a("p",[n._v('prop和attr的区别：prop方法不仅能够操作属性, 他还能操作属性节点\n具有 true 和 false 两个属性的属性节点，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()\nconsole.log($("input").prop("checked")); // true / false\nconsole.log($("input").attr("checked")); // checked / undefined')]),n._v(" "),a("h2",{attrs:{id:"jq操作类相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq操作类相关"}},[n._v("#")]),n._v(" jq操作类相关")]),n._v(" "),a("p",[n._v('1.addClass(class|fn)\n作用: 添加一个类\n如果要添加多个, 多个类名之间用空格隔开即可\n$("div").addClass("class1 class2");')]),n._v(" "),a("p",[n._v('2.removeClass([class|fn])\n作用: 删除一个类\n如果想删除多个, 多个类名之间用空格隔开即可\n$("div").removeClass("class2 class1");')]),n._v(" "),a("p",[n._v('3.toggleClass(class|fn[,sw])\n作用: 切换类，相反\n有就删除, 没有就添加\n$("div").toggleClass("class2 class1");')]),n._v(" "),a("p",[n._v("注意点：类名不需要加小点")]),n._v(" "),a("h2",{attrs:{id:"jq-文本操作相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq-文本操作相关"}},[n._v("#")]),n._v(" jq 文本操作相关")]),n._v(" "),a("ol",[a("li",[a("p",[n._v('html([val|fn])\n和原生JS中的innerHTML一模一样\n$("div").html("')]),a("p",[n._v("我是段落"),a("span",[n._v("我是span")])]),n._v('")\nconsole.log($("div").html())//不写参数就是获取'),a("p")]),n._v(" "),a("li",[a("p",[n._v('text([val|fn])\n和原生JS中的innerText一模一样\n$("div").text("')]),a("p",[n._v("我是段落"),a("span",[n._v("我是span")])]),n._v('")\nconsole.log($("div").text())'),a("p")]),n._v(" "),a("li",[a("p",[n._v('val([val|fn|arr])\n$("input").val("请输入内容")\nconsole.log($("input").val())')])])]),n._v(" "),a("h2",{attrs:{id:"css-操作相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-操作相关"}},[n._v("#")]),n._v(" css 操作相关")]),n._v(" "),a("p",[n._v('1.逐个设置\n$("div").css("width", "100px");\n$("div").css("height", "100px");\n$("div").css("background", "red");')]),n._v(" "),a("p",[n._v('2.链式设置\n注意点: 链式操作如果大于3步, 建议分开\n$("div").css("width", "100px").css("height", "100px").css("background", "blue");')]),n._v(" "),a("p",[n._v('3.批量设置√\n$("div").css({\nwidth: "100px",\nheight: "100px",\nbackground: "red"\n});')]),n._v(" "),a("p",[n._v('4.获取CSS样式值\nconsole.log($("div").css("background"));')]),n._v(" "),a("h2",{attrs:{id:"尺寸和位置操作相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尺寸和位置操作相关"}},[n._v("#")]),n._v(" 尺寸和位置操作相关")]),n._v(" "),a("p",[n._v("width()元素宽度，有参数表示设置\ninnerWidth()元素快读+内边距\nouterWidth()元素快读+内边距+边框")]),n._v(" "),a("p",[n._v('offset()获取距离窗口的偏移位\n获取：console.log($(".son").offset().left)\n设置：$(".son").offset({left: 10});')]),n._v(" "),a("p",[n._v('position()\n作用: 获取元素距离定位元素的偏移位\nconsole.log($(".son").position().left)\n注意点: position方法只能获取不能设置，可以用css')]),n._v(" "),a("p",[n._v('获取滚动的偏移位\nconsole.log($(".scroll").scrollTop())\n设置滚动的偏移位\n$(".scroll").scrollTop(300)')]),n._v(" "),a("p",[n._v('获取网页滚动的偏移位\n注意点: ie body获取，html为0，其他浏览器body为0，html获取。为了保证浏览器的兼容, 获取网页滚动的偏移位需要按照如下写法\nconsole.log($("body").scrollTop()+$("html").scrollTop())\nconsole.log($(window).scrollTop())//同上，注意没有引号，有引号为null\n设置网页滚动偏移位\n注意点: 为了保证浏览器的兼容, 设置网页滚动偏移位的时候必须按照如下写法\n$("html,body").scrollTop(300);\n$(window).scrollTop(300)')]),n._v(" "),a("h2",{attrs:{id:"jq事件绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq事件绑定"}},[n._v("#")]),n._v(" jq事件绑定")]),n._v(" "),a("p",[n._v('第一种方式 .eventName(fn)\n$("button").click(function () {\nalert("hello lnj");\n})')]),n._v(" "),a("p",[n._v('第二种方式 on(eventName,fn)\n$("button").on("click", function () {\nalert("hello click1");\n})')]),n._v(" "),a("p",[n._v("注意点:事件绑定可以添加多个相同或者不同类型的事件,不会覆盖")]),n._v(" "),a("h2",{attrs:{id:"jq事件移除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq事件移除"}},[n._v("#")]),n._v(" jq事件移除")]),n._v(" "),a("p",[n._v('off方法如果不传递参数, 会移除所有的事件\n$("button").off()\noff方法如果传递一个参数, 会移除所有指定类型的事件\n$("button").off("click")\noff方法如果传递两个参数, 会移除所有指定类型的指定事件\n$("button").off("click", test1)')]),n._v(" "),a("h2",{attrs:{id:"事件冒泡和默认行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡和默认行为"}},[n._v("#")]),n._v(" 事件冒泡和默认行为")]),n._v(" "),a("p",[n._v('1.什么是事件冒泡?\n子元素事件响应但是父元素事件也响应。\n2.如何阻止事件冒泡\n在子元素回调事件中return false\n或者在子元素回调参数中传event 最后来个event.stopPropagtion()\n$(".son").click(function (event) {\nalert("son");\n// return false;\nevent.stopPropagation();\n});\n$(".father").click(function () {\nalert("father");\n})')]),n._v(" "),a("p",[n._v('3.什么是默认行为?\n默认行为：比如a标签默认进行跳转，表单提交远程服务器\n4.如何阻止默认行为\n需要阻止的事件return false\n或者 event.preventDefault()\n$("a").click(function (event) {\nalert("弹出注册框");\n// return false;\nevent.preventDefault();\n})')]),n._v(" "),a("h2",{attrs:{id:"代码自动触发事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码自动触发事件"}},[n._v("#")]),n._v(" 代码自动触发事件")]),n._v(" "),a("p",[n._v('$(".father").trigger("click")\n$(".father").triggerHandler("click")')]),n._v(" "),a("p",[n._v("注意点：\ntrigger: 如果利用trigger自动触发事件,会触发事件冒泡，会触发默认行为\ntriggerHandler: 如果利用triggerHandler自动触发事件, 不会触发事件冒泡，不会触发默认行为")]),n._v(" "),a("p",[a("a",{attrs:{href:"http://www.baidu.com"}},[a("span",[n._v("注册")])])]),n._v(" "),a("p",[n._v('$("span").click(function () {\nalert("a");\n});\n//参数为触发的事件名称\n// $("a").triggerHandler("click");//不跳转\n$("span").trigger("click");//不要去触发 a ，应该去触发a里面的内容，比如这里的span，直接触发a默认行为也没有。')]),n._v(" "),a("h2",{attrs:{id:"自定义事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件"}},[n._v("#")]),n._v(" 自定义事件")]),n._v(" "),a("p",[n._v('什么是自定义事件？原js，jq没有的事件名称\n自定义事件的条件：\n1.事件必须是通过on绑定的\n2.事件必须通过trigger来触发\n$(".son").on("myClick", function () {\nalert("son");\n})\n$(".son").triggerHandler("myClick");\n没有on的是jquery帮你包装好的，on可以实现元素的所有方法')]),n._v(" "),a("h2",{attrs:{id:"事件命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件命名空间"}},[n._v("#")]),n._v(" 事件命名空间")]),n._v(" "),a("p",[n._v("解决问题：企业多人操作一个项目，可能同一个元素添加事件。代码阅读造成麻烦。\n想要事件的命名空间有效,必须满足两个条件\n1.事件是通过on来绑定的\n2.通过trigger自动触发事件")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('$(".son").on("click.zs", function () {\n    alert("click1");\n});\n$(".son").on("click.ls", function () {\n    alert("click2");\n});\n// $(".son").trigger("click.zs");\n$(".son").trigger("click.ls")\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('        $(".father").on("click.ls", function () {\n            alert("father click1");\n        });\n        $(".father").on("click", function () {\n            alert("father click2");\n        });\n        $(".son").on("click.ls", function () {\n            alert("son click1");\n        });\n        /*\n        利用trigger触发子元素带命名空间的事件, 那么父元素带相同命名空间的事件也会被触发. 而父元素没有命名空间的事件不会被触发(事件冒泡)\n        利用trigger触发子元素不带命名空间的事件,那么子元素所有相同类型的事件和父元素所有相同类型的事件都会被触发\n        */\n        // $(".son").trigger("click.ls");//son click1,father click1\n        $(".son").trigger("click");//son click1,father click1,father click2\n')])])]),a("h2",{attrs:{id:"事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件委托"}},[n._v("#")]),n._v(" 事件委托")]),n._v(" "),a("p",[n._v('什么是事件委托?\n请别人帮忙做事情, 然后将做完的结果反馈给我们\n$("button").click(function () {\n$("ul").append("')]),a("li",[n._v("我是新增的li")]),n._v('");\n})'),a("p"),n._v(" "),a("p",[n._v('在jQuery中,如果通过核心函数找到的元素不止一个, 那么在添加事件的时候,jQuery会遍历所有找到的元素,给所有找到的元素添加事件\n$("ul>li").click(function () {\nconsole.log($(this).html());\n});')]),n._v(" "),a("p",[n._v("比如这里的所有的li点击后都会打印\n但是新增的li不会动态响应事件，入口函数在dom加载完后执行，新增的li没有响应，所以需要事件委托。也可以用on来注册click新事件\n//ul:被委托者 li：委托者 click：委托监听事件")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('$("ul").delegate("li", "click", function () {\n    console.log($(this).html());\n});\n$("ul").on("click","li", function () {\n    console.log($(this).html());\n});\n')])])]),a("p",[n._v("以上代码的含义, 让ul帮li监听click事件\n之所以能够监听, 是因为入口函数执行的时候ul就已经存在了, 所以能够添加事件\n之所以this是li,是因为我们点击的是li, 而li没有click事件, 所以事件冒泡传递给了ul,ul响应了事件, 既然事件是从li传递过来的,所以ul必然指定this是谁出")]),n._v(" "),a("p",[n._v("事件委托优点：动态响应事件，缺点：需要父元素来监听\n所以动态监听都要用到事件委托")]),n._v(" "),a("h2",{attrs:{id:"鼠标移入移除事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#鼠标移入移除事件"}},[n._v("#")]),n._v(" 鼠标移入移除事件")]),n._v(" "),a("p",[n._v('mouseover/mouseout事件, 在子元素移入移出也会触发父元素的事件\n$(".father").mouseover(function () {\nconsole.log("father被移入了");\n});\n$(".father").mouseout(function () {\nconsole.log("father被移出了");\n});//从父元素移到子元素内，father被移出了，father被移入了\nmouseenter/mouseleave事件, 在子元素移入移出不会触发父元素的事件\n$(".father").mouseenter(function () {\nconsole.log("father被移入了");\n});\n$(".father").mouseleave(function () {\nconsole.log("father被移出了");\n});//从父元素移到子元素内，不会再触发父元素\njq中hover监听移入移除事件，第一个function为移入，第二个functionWie移除，内部原理就是mouseenter/mouseleave\n$(".father").hover(function () {\nconsole.log("father被移入了");\n},function () {\nconsole.log("father被移出了");\n})')]),n._v(" "),a("h2",{attrs:{id:"eq找出元素中指定序号元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eq找出元素中指定序号元素"}},[n._v("#")]),n._v(" eq找出元素中指定序号元素")]),n._v(" "),a("p",[n._v('获取序号\n$(this).index()\n找出许多元素中指定index元素(来进行操作)\nvar $li = $("content>li").eq(index)\n$li.siblings().removeClass("xxx")')]),n._v(" "),a("h2",{attrs:{id:"筛选函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#筛选函数"}},[n._v("#")]),n._v(" 筛选函数")]),n._v(" "),a("h3",{attrs:{id:"筛选出的非当前选择对象-来进行操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#筛选出的非当前选择对象-来进行操作"}},[n._v("#")]),n._v(" 筛选出的非当前选择对象(来进行操作)")]),n._v(" "),a("p",[n._v("$(this).siblings()")]),n._v(" "),a("h3",{attrs:{id:"找到指定祖先"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#找到指定祖先"}},[n._v("#")]),n._v(" 找到指定祖先")]),n._v(" "),a("p",[n._v('$(this).parents("xxx")')]),n._v(" "),a("h3",{attrs:{id:"获取指定子元素中的某些元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取指定子元素中的某些元素"}},[n._v("#")]),n._v(" 获取指定子元素中的某些元素")]),n._v(" "),a("p",[n._v('children("xxx")')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('let $sub = $(this).children(".sub")\nlet $other = $(this).siblings().children(".sub")\n')])])]),a("h2",{attrs:{id:"jq动画效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq动画效果"}},[n._v("#")]),n._v(" jq动画效果")]),n._v(" "),a("h3",{attrs:{id:"show-1000"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-1000"}},[n._v("#")]),n._v(" show(1000)")]),n._v(" "),a("p",[n._v('show(1000,function(){})//动画执行完毕后调用\n一般对于display:none;后实现\n切换效果\n$("button").eq(2).click(function () {\n$("div").toggle(1000, function () {\nalert("切换动画执行完毕")\n})\n})')]),n._v(" "),a("h3",{attrs:{id:"hide-1000"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hide-1000"}},[n._v("#")]),n._v(" hide(1000)")]),n._v(" "),a("p",[n._v("hide(1000,function(){\n//....\n})")]),n._v(" "),a("h3",{attrs:{id:"纵向展开-收起-切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纵向展开-收起-切换"}},[n._v("#")]),n._v(" 纵向展开/收起/切换")]),n._v(" "),a("p",[n._v("展开：slideDown(1000)\n收起：slideUp(1000)\n切换：slideToggle(1000,function(){})")]),n._v(" "),a("p",[n._v("菜单栏目例子:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    $(function () {\n        $(".nav>li").click(function(){\n            let $sub = $(this).children(".sub")\n            $sub.slideDown(1000)\n            let $other = $(this).siblings().children(".sub")\n            $other.slideUp(1000)\n            $(this).addClass("current")\n            $(this).siblings().removeClass("current")\n        })\n    })\n')])])]),a("h3",{attrs:{id:"停止当前正在运行的动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止当前正在运行的动画"}},[n._v("#")]),n._v(" 停止当前正在运行的动画")]),n._v(" "),a("p",[n._v("stop();//可以保持突发情况下动画的流畅程度")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('            $(".nav>li").mouseenter(function () {\n                // 1.1拿到二级菜单\n                var $sub = $(this).children(".sub");\n                // 停止当前正在运行的动画：\n                $sub.stop();\n                // 1.2让二级菜单展开\n                $sub.slideDown(1000);\n            });\n            // 2.监听一级菜单的移出事件\n            $(".nav>li").mouseleave(function () {\n                // 1.1拿到二级菜单\n                var $sub = $(this).children(".sub");\n                // 停止当前正在运行的动画：\n                $sub.stop();\n                // 1.2让二级菜单收起\n                $sub.slideUp(1000);\n            });\n')])])]),a("h3",{attrs:{id:"淡入淡出动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#淡入淡出动画"}},[n._v("#")]),n._v(" 淡入淡出动画")]),n._v(" "),a("p",[n._v("fadeIn()\nfadeOut()\nfadeToggle()\nfadeTo(time,degree,function(){})//淡入的时间和程度")]),n._v(" "),a("h3",{attrs:{id:"stop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[n._v("#")]),n._v(" stop()")]),n._v(" "),a("p",[n._v('可以传参\n立即停止当前动画, 继续执行后续的动画\n$("div").stop()\nstop(false)\n$("div").stop(false, false)')]),n._v(" "),a("p",[n._v('立即停止当前和后续所有的动画\nstop(true)\n$("div").stop(true, false)')]),n._v(" "),a("p",[n._v('立即完成当前的, 继续执行后续动画\n$("div").stop(false, true)')]),n._v(" "),a("p",[n._v("立即完成当前的, 并且停止后续所有的\nstop(true, true)")]),n._v(" "),a("h3",{attrs:{id:"多个动画执行队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个动画执行队列"}},[n._v("#")]),n._v(" 多个动画执行队列")]),n._v(" "),a("p",[n._v('动画队列，前面的执行完后面才会执行\n$(".ad").stop().slideDown(1000).fadeOut(1000).fadeIn(1000)\n注意点：jq动画最好加个stop，动画队列，没有的话需要等到每个做完在做下一个（自嗨现象）\n上面代码等同于：')]),n._v(" "),a("p",[n._v('$(".ad").slideDown(1000, function () {\n$(".ad").fadeOut(1000, function () {\n$(".ad").fadeIn(1000);\n});\n});')]),n._v(" "),a("h3",{attrs:{id:"自定义动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义动画"}},[n._v("#")]),n._v(" 自定义动画")]),n._v(" "),a("p",[n._v('animate()\n$(".one").animate({\nmarginLeft: 500\n}, 5000, function () {\nalert("自定义动画执行完毕");\n})')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('            $(".one").animate({\n                width: "+=100"\n            }, 1000, function () {\n                alert("自定义动画执行完毕");\n            })\n\n            $(".one").animate({\n                // width: "hide"\n                width: "toggle"\n            }, 1000, function () {\n                alert("自定义动画执行完毕");\n            })\n')])])]),a("p",[n._v("第一个参数: 接收一个对象, 可以在对象中修改属性\n第二个参数: 指定动画时长\n第三个参数: 指定动画节奏, 默认就是swing\n第四个参数: 动画执行完毕之后的回调函数")]),n._v(" "),a("p",[n._v("swing两头慢中间快 linear匀速")]),n._v(" "),a("p",[n._v('注意点：在jQuery的{}中可以同时修改多个属性, 多个属性的动画也会同时执行\n$(".one").animate({\nwidth: 500,\nheight: 500\n}, 1000);')]),n._v(" "),a("h3",{attrs:{id:"动画延时delay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动画延时delay"}},[n._v("#")]),n._v(" 动画延时delay()")]),n._v(" "),a("p",[n._v('$(".one").animate({\nwidth: 500\n// height: 500\n}, 1000).delay(2000).animate({\nheight: 500\n}, 1000)')]),n._v(" "),a("h2",{attrs:{id:"节点操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点操作"}},[n._v("#")]),n._v(" 节点操作")]),n._v(" "),a("h3",{attrs:{id:"添加节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加节点"}},[n._v("#")]),n._v(" 添加节点")]),n._v(" "),a("p",[n._v("内部插入\nappend(content|fn)\nappendTo(content)\n会将元素添加到指定元素内部的最后")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('prepend(content|fn)\nprependTo(content)\n会将元素添加到指定元素内部的最前面\n\n$("ul").append($li)\n$li.appendTo("ul")\n插入模板字符串\n')])])]),a("p",[n._v("外部插入\nafter(content|fn)\n会将元素添加到指定元素外部的后面")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('before(content|fn)\n会将元素添加到指定元素外部的前面\n\ninsertAfter(content)\ninsertBefore(content)\n\n$("ul").after($li)\n$li.insertAfter("ul")\n')])])]),a("h3",{attrs:{id:"删除节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[n._v("#")]),n._v(" 删除节点")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('remove([expr])\ndetach([expr])\n删除指定元素\n$(this).parents(".info").remove()\n\nempty()\n删除指定元素的内容和子元素, 指定元素自身不会被删除，清空内容\n')])])]),a("h3",{attrs:{id:"替换元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替换元素"}},[n._v("#")]),n._v(" 替换元素")]),n._v(" "),a("p",[n._v('replaceWith()\nreplaceAll()\n替换所有匹配的元素为指定的元素\n1.新建一个元素\nvar $h6 = $("')]),a("h6",[n._v("我是标题6")]),n._v('")\n2.替换元素\n$("h1").replaceWith($h6)\n$h6.replaceAll("h1")//效果一样主体不同'),a("p"),n._v(" "),a("h3",{attrs:{id:"复制节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制节点"}},[n._v("#")]),n._v(" 复制节点")]),n._v(" "),a("p",[n._v("clone([Even[,deepEven]])\n如果传入false就是浅复制, 如果传入true就是深复制\n浅复制只会复制元素, 不会复制元素的事件\n深复制会复制元素, 而且还会复制元素的事件")]),n._v(" "),a("p",[n._v('1.浅复制一个元素\nvar $li = $("li:first").clone(false)\n2.将复制的元素添加到ul中\n$("ul").append($li)')]),n._v(" "),a("p",[n._v('1.深复制一个元素\nvar $li = $("li:first").clone(true)\n2.将复制的元素添加到ul中\n$("ul").append($li)')]),n._v(" "),a("p",[n._v("面试题：用原生js写一个深浅复制的方法")]),n._v(" "),a("h2",{attrs:{id:"jquery原理-编写自己的jquery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jquery原理-编写自己的jquery"}},[n._v("#")]),n._v(" jQuery原理(编写自己的jquery)")]),n._v(" "),a("h3",{attrs:{id:"源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[n._v("#")]),n._v(" 源码")]),n._v(" "),a("p",[n._v("(function( window, undefined ) {\n...\nvar jQuery = function( ) {\nreturn new jQuery.prototype.init( );\n}")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("jQuery.prototype = {\n    constructor: jQuery\n}\n\njQuery.prototype.init.prototype = jQuery.prototype; \n//外界可以拿到内部变量\nwindow.jQuery = window.$ = jQuery;\n")])])]),a("p",[n._v("})( window )//传入参数")]),n._v(" "),a("p",[n._v("1.jQuery的本质是一个闭包\n2.jQuery为什么要使用闭包来实现?\n为了避免多个框架变量名重复的冲突，否则先定义变量的被覆盖掉。\n3.jQuery如何让外界访问内部定义的局部变量\n包内 window.xxx = xxx;\n4.jQuery为什么要给自己传递一个window参数?\n为了方便后期压缩代码\n为了提升查找的效率,window\n5.jQuery为什么要给自己接收一个undefined参数?\n为了方便后期压缩代码，传入后期可以简写\nIE9以下的浏览器undefined可以被修改, 为了保证内部使用的undefined不被修改, 所以需要接收一个正确的undefined")]),n._v(" "),a("h3",{attrs:{id:"jq入口函数传入参数返回"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jq入口函数传入参数返回"}},[n._v("#")]),n._v(" jq入口函数传入参数返回")]),n._v(" "),a("p",[n._v("jQ入口函数传入不同参数得到的实例")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('1.传入 \'\' null undefined NaN  0  false, 返回空的jQuery对象\n2.字符串:\n    代码片段:会将创建好的DOM元素存储到jQuery对象中返回\n    选择器: 会将找到的所有元素存储到jQuery对象中返回\n3.数组:\n    会将数组中存储的元素依次存储到jQuery对象中立返回\n4.除上述类型以外的:\n    会将传入的数据存储到jQuery对象中返回\n\n字符串判断代码片段：\nstr.charAt(0)=="<" && str.charAt(str.length-1)==">" && str.length>3//首尾字符串符号判断\ntrim()去掉字符串首尾的空格;不支持的情况下可以用replace方法完善trim方法，可接受正则表达式\n\n\n操作：\n1、根据代码片段创建所有元素\nlet temp = document.createElement("div")\ntemp.innerHTML = selector //传进来的代码片段字符串,此时temp已经创建好元素\n\n2、将创建好的一级元素添加到jquery中\ntemp.children拿到一组，循环遍历拿完\nfor (let i =0;i<temp.children.length;i++){\n    this[i] = temp.children[i]\n}\n3、给jquuery添加length属性\nthis.length = temp.children.length\n4、返回加工好的jquery对象\nreturn this\n\n官方如果传入的代码片段前后有空格可以处理，任然可以创建元素\n')])])]),a("h3",{attrs:{id:"jquery中的方法实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jquery中的方法实现"}},[n._v("#")]),n._v(" jquery中的方法实现")]),n._v(" "),a("p",[n._v("封装方法")])])}),[],!1,null,null,null);t.default=s.exports}}]);